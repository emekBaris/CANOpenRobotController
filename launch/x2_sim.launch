<?xml version="1.0"?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="false"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="x2_controllers" default="position_controller velocity_controller torque_controller"/>
  <arg name="legs_controllers" default="position_torque_controller torque_controller"/>
  <arg name="load_human" default="true"/>
  <arg name="robot_description_name" default="x2/robot_description"/>
  <arg name="legs_description_name" default="legs/robot_description"/>

  <!-- Launch empty world in gazebo -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="output" value="log"/>
  </include>

  <!-- load the urdf of X2 into the parameter server -->
  <param name="$(arg robot_description_name)" command="$(find xacro)/xacro '$(find x2_description)/urdf/x2_fixed_base.urdf.xacro'  robot_description_name:=$(arg robot_description_name)"/>

  <!-- Spawn X2 -->
  <node name="urdf_robot_spawner" pkg="gazebo_ros" type="spawn_model" args="-param $(arg robot_description_name) -urdf -model x2"/>

  <!-- Load X2 joint controller of configurations from YAML file to parameter server -->
  <rosparam file="$(find CORC)/config/x2_ros_control.yaml" command="load"/>

  <!-- load X2 joint state controller -->
  <node name="robot_joint_state_spawner" pkg="controller_manager" type="spawner" respawn="false"
     ns="/x2" args="joint_state_controller" output="screen"/>

  <!-- load other controllers of x2 in stopped state -->
  <node name="robot_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
     ns="/x2" args="--stopped $(arg x2_controllers)" output="screen"/> 

  <!-- The robot_state_publisher reads the urdf from /robot_description parameter
       and listens to joint information on the /joint_states topic -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
  <remap from="/joint_states" to="/x2/joint_states" />
  <remap from="robot_description" to="$(arg robot_description_name)"/>
  </node>

<group unless="$(arg load_human)"> 
  <!-- rviz will enable us to see the robot -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find x2_description)/rviz/view_robot.rviz"/>
</group> 

  <!-- CORC 
  <node name="x2_node" pkg="CORC" type="X2DemoMachine_APP_NOROBOT" output="screen"/> -->

<group if="$(arg load_human)"> 

  <!-- load the urdf of human_legs into the parameter server -->
  <param name="$(arg legs_description_name)" command="$(find xacro)/xacro '$(find legs_description)/urdf/legs_fixed_base.urdf.xacro' legs_description_name:=$(arg legs_description_name)"/> 

  <!-- Spawn human legs -->
  <node name="urdf_legs_spawner" pkg="gazebo_ros" type="spawn_model" args="-param $(arg legs_description_name) -urdf -model legs"/>

  <!-- Load legs joint controller of configurations from YAML file to parameter server -->
  <rosparam file="$(find legs_controller)/config/legs_ros_control.yaml" command="load"/> 

  <!-- load legs joint state controller -->
  <node name="legs_joint_state_spawner" pkg="controller_manager" type="spawner" respawn="false"
     ns="/legs" args="joint_state_controller" output="screen"/>

  <!-- load other controllers of legs in stopped state -->
  <node name="legs_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
     ns="/legs" args="--stopped $(arg legs_controllers)" output="screen"/>

  <!-- The robot_state_publisher reads the urdf from /robot_description parameter
       and listens to joint information on the /joint_states topic -->
  <node name="legs_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
  <remap from="/joint_states" to="/legs/joint_states" />
  <remap from="robot_description" to="$(arg legs_description_name)"/>
  </node>

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find x2_description)/rviz/view_robot_with_human.rviz"/>

</group> 

</launch>

